#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include <iostream> 

using namespace cv; 


Mat src, src_gray;
Mat dst, detected_edges; 

int lowThreshold = 0;
const int max_lowThreshold = 100;
const int ratio = 3;
const int kernel_size = 3;
const char* window_name = "Bordes "; 

static void CannyThreshold(int, void*)
{ 

blur( src_gray, detected_edges, Size(3,3) ); 
Canny( detected_edges, detected_edges, lowThreshold, lowThreshold*ratio, kernel_size ); 

dst = Scalar::all(0); 

src.copyTo( dst, detected_edges); 
imshow( window_name, dst ); 
}
int main( int argc, char** argv )
{ 
/*std::string image_path = samples::findFile("../fruits.jpg");
Mat src = imread(image_path, IMREAD_COLOR); */

CommandLineParser parser( argc, argv, "{@input | fruits.jpg | input image}" );
src = imread( samples::findFile( parser.get<String>( "@input" ) ), IMREAD_COLOR ); 

dst.create( src.size(), src.type() ); 

cvtColor( src, src_gray, COLOR_BGR2GRAY );
namedWindow( window_name, WINDOW_AUTOSIZE ); 

createTrackbar( "Min Threshold:", window_name, &lowThreshold, max_lowThreshold, CannyThreshold ); 

CannyThreshold(0, 0);
waitKey(0);

return 0;
} 
